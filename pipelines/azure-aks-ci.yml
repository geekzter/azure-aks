parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd
  - cd1
  - cd2
  - cd3
- name: clear
  displayName: Clear state
  type: boolean
  default: false
- name: deploy
  displayName: Deploy applications
  type: boolean
  default: true
- name: destroy
  displayName: Destroy infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: boolean
  default: false
- name: unpinTerraformProviders
  displayName: Unpin Terraform provider versions
  type: string
  default: No
  values:
  - No
  - Yes
  - Strategy

trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'aks-ci'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azure-aks'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_WORKSPACE'
  value: ${{ parameters.workspace }}
- name: 'manifestDirectory'
  value: '$(Build.SourcesDirectory)/manifests'
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformArtifactName'
  value: 'terraform'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_VAR_resource_prefix'
  value: 'k8s'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'

jobs:
- job: 'Provision'
  ${{ if and(eq(parameters.destroy, 'Always'),parameters.deploy) }}:
    displayName: 'Provision (${{ parameters.workspace }}), Deploy, Test & Destroy'
  ${{ if and(eq(parameters.destroy, 'Never'),parameters.deploy) }}:
    displayName: 'Provision (${{ parameters.workspace }}), Deploy & Test'
  ${{ if and(eq(parameters.destroy, 'On failure'),parameters.deploy) }}:
    displayName: 'Provision (${{ parameters.workspace }}), Deploy, Test & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'On success'),parameters.deploy) }}:
    displayName: 'Provision (${{ parameters.workspace }}), Deploy, Test & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'Always'),not(parameters.deploy)) }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy'
  ${{ if and(eq(parameters.destroy, 'Never'),not(parameters.deploy)) }}:
    displayName: 'Provision (${{ parameters.workspace }})'
  ${{ if and(eq(parameters.destroy, 'On failure'),not(parameters.deploy)) }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'On success'),not(parameters.deploy)) }}:
    displayName: 'Provision (${{ parameters.workspace }}) & Destroy (${{ lower(parameters.destroy) }})'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  ${{ if or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
    strategy:
      matrix:
        pinTerraformProviders:
          TF_VAR_resource_suffix: '$(Build.BuildId)p'
          unpinTerraformProviders: false
        unpinTerraformProviders:
          TF_VAR_resource_suffix: '$(Build.BuildId)u'
          unpinTerraformProviders: true
      maxParallel: 1

  variables:
    ${{ if not(or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual')))) }}:
      # Not runnig as strategy
      ${{ if parameters.clear }}:  # Don't reset suffix if we want to keep existing resources
        TF_VAR_resource_suffix: '$(Build.BuildId)'
      unpinTerraformProviders: ${{ eq(parameters.unpinTerraformProviders, 'Yes') }}
    resourceGroup: '$(TF_VAR_resource_prefix)-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

  workspace:
    clean: all

  steps:
    - ${{ if parameters.clear }}:
      - task: AzureCLI@2
        name: clear
        displayName: 'Remove conflicting resources from previous runs'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Remove VNet peerings
            if ($env:GEEKZTER_AGENT_VIRTUAL_NETWORK_ID) {
              $peeringIDs = $(az network vnet show --ids $env:GEEKZTER_AGENT_VIRTUAL_NETWORK_ID --query "virtualNetworkPeerings[?starts_with(name,'k8s-${env:TF_WORKSPACE}-')].id" -o tsv 2>$null)
              if ($peeringIDs) {
                Write-Host "Removing virtual network peerings `"${peeringIDs}`"..."
                &{ # az writes information to stderr
                  $ErrorActionPreference = 'SilentlyContinue'
                  az resource delete --ids $peeringIDs 2>&1
                }
              } else {
                Write-Host "No virtual network peerings to remove"
              }
            }
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'

    - ${{ if not(parameters.unpinTerraform) }}:
      - pwsh: |
          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config'
        workingDirectory: '$(terraformDirectory)'

    - ${{ if parameters.unpinTerraform }}:
      - pwsh: |
          (Get-Content ./provider.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File provider.tf
          Get-Content ./provider.tf
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]latest"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config (latest version)'
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformInstaller@0
      displayName: 'Install terraform'
      inputs:
        terraformVersion: '$(terraformConfig.version)'

    - ${{ if or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
      # Unpin version e.g. "= 2.56" -> "~> 2.56"
      - pwsh: |
          (Get-Content ./provider.tf) -replace " = `" *= +",' = "~> ' | Out-File provider.tf
          Get-Content ./provider.tf
          if (Test-Path .terraform.lock.hcl) {
            Remove-Item .terraform.lock.hcl -Force
          }
        displayName: 'Unpin Terraform provider versions'
        # condition required as '- ${{ if ' template expression is not evaluated when using a strategy
        condition: and(succeeded(), eq(variables['unpinTerraformProviders'],'true'))
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(terraformDirectory)'
        backendType: 'azurerm'
        backendServiceArm: '$(subscriptionConnection)'
        backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
        backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true

    - ${{ if ne(parameters.destroy, 'Never') }}:
      - publish: $(terraformDirectory)
        displayName: 'Publish Terraform workspace'
        ${{ if or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
          condition: and(succeeded(), eq(variables['unpinTerraformProviders'],'false'))
        artifact: $(terraformArtifactName)

    - ${{ if parameters.clear }}:
      - task: AzureCLI@2
        name: cleanup
        displayName: 'Clear Terraform state'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Clean up Terraform state
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'

    - ${{ if not(parameters.clear) }}:
      - task: AzureCLI@2
        displayName: 'Restore kubeconfig'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
              $DebugPreference       = "Continue"
              $InformationPreference = "Continue"
              $VerbosePreference     = "Continue"
              Set-PSDebug -Trace 2
            }
            ./kube_config.ps1
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'

    - pwsh: |
        # Use pipeline agent VNet as network to peer from
        $env:TF_VAR_peer_network_id ??= $env:GEEKZTER_AGENT_VIRTUAL_NETWORK_ID

        if ($env:TF_VAR_ADDRESS_SPACE) {
          Remove-Item env:TF_VAR_ADDRESS_SPACE 2>$null # Override below
        }
        if ($${{ not(parameters.clear) }} -and (!((terraform output resource_suffix 2>&1) -match "Warning"))) {
          # Keep random values of previous runs
          $env:TF_VAR_address_space   = "$(terraform output -raw address_space 2>$null)"
          $env:TF_VAR_RESOURCE_SUFFIX = $null
          $env:TF_VAR_resource_suffix = "$(terraform output -raw resource_suffix 2>$null)"
        }
        # Set random CIDR (to reduce the risk of clashing VNet peerings with agent VNet)
        $env:TF_VAR_address_space   ??= "$([IPAddress]::Parse([String] (167772160 + (65536*(Get-Random -Minimum 0 -Maximum 255 -SetSeed $(Build.BuildId))))) | Select-Object -ExpandProperty IPAddressToString)/16"

        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GEEKZTER_*,TF_* | Sort-Object -Property Name

        # Convert uppercased Terraform environment variables to .auto.tfvars file
        foreach ($tfvar in $(Get-ChildItem -Path Env: -Recurse -Include TF_VAR_*)) {
          $terraformVariableName = $tfvar.Name.Substring(7).ToLowerInvariant()
          $terraformVariableValue = $tfVar.Value

          if ($terraformVariableValue -imatch "^\W*(true|false|\[[^\]]*\]|\{[^\}]*\})\W*$") {
            # Boolean or List, write as-is
            Write-Output "${terraformVariableName} = ${terraformVariableValue}" | Out-File ci.auto.tfvars -Append -Force
          } else {
            Write-Output "${terraformVariableName} = `"${terraformVariableValue}`"" | Out-File ci.auto.tfvars -Append -Force
          }
        } 
        Write-Host "Contents of ci.auto.tfvars:"
        Get-Content ci.auto.tfvars
      name: terraformVariables
      displayName: 'Prepare Terraform variables'
      workingDirectory: '$(terraformDirectory)'

    - task: AzureCLI@2
      displayName: 'Terraform plan & apply'
      name: terraformApply
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Propagate pipeline Service Principal as Terraform variables
          $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
          $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
          $env:ARM_TENANT_ID       ??= $env:tenantId
          # Get from Azure CLI context
          $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
          $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)

          ./deploy.ps1 -apply -force
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - ${{ if parameters.deploy }}:
      - task: KubectlInstaller@0
        displayName: 'Install kubectl'
        condition: and(succeeded(), not(eq(coalesce(variables['terraformApply.aks_name'],'null'),'null')), eq(variables['terraformApply.peered_network'],'true'))
        inputs:
          kubectlVersion: 'latest'

    - ${{ if or(parameters.deploy, parameters.testReentrance) }}:
      - task: AzureCLI@2
        displayName: 'Wait for Application Gateway'
        condition: and(succeeded(), not(eq(coalesce(variables['terraformApply.application_gateway_id'],'null'),'null')))
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: scriptPath
          scriptPath: $(scriptDirectory)/wait_for_app_gw.ps1
          arguments:
            -AksName $(terraformApply.aks_name) `
            -ApplicationGatewayName "$(terraformApply.application_gateway_id)".Split("/")[-1] `
            -ResourceGroupName $(terraformApply.resource_group)
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: '$(scriptDirectory)'

    - ${{ if parameters.deploy }}:
      - task: Kubernetes@1
        displayName: 'kubectl apply: ASP.NET App'
        condition: and(succeeded(), not(eq(coalesce(variables['terraformApply.aks_name'],'null'),'null')), eq(variables['terraformApply.peered_network'],'true'))
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: '$(subscriptionConnection)'
          azureResourceGroup: '$(terraformApply.resource_group)'
          kubernetesCluster: '$(terraformApply.aks_name)'
          useClusterAdmin: true
          command: 'apply'
          useConfigurationFile: true
          configuration: '$(manifestDirectory)/aspnetapp.yaml'
          secretType: 'generic'
        
    - ${{ if parameters.deploy }}:
      - task: Kubernetes@1
        displayName: 'kubectl apply: Voting App'
        condition: and(succeeded(), not(eq(coalesce(variables['terraformApply.aks_name'],'null'),'null')), eq(variables['terraformApply.peered_network'],'true'))
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: '$(subscriptionConnection)'
          azureResourceGroup: '$(terraformApply.resource_group)'
          kubernetesCluster: '$(terraformApply.aks_name)'
          useClusterAdmin: true
          command: 'apply'
          useConfigurationFile: true
          configuration: '$(manifestDirectory)/internal-vote.yaml'
          secretType: 'generic'

    - ${{ if parameters.deploy }}:
      - task: AzureCLI@2
        condition: and(succeeded(), not(eq(coalesce(variables['terraformApply.aks_name'],'null'),'null')), eq(variables['terraformApply.peered_network'],'true'))
        displayName: 'Test applications'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)              

            ./deploy_app.ps1
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: '$(scriptDirectory)'
        env:
          KUBECONFIG: variables['KUBE_CONFIG_PATH']

    - ${{ if parameters.testReentrance }}:
      - task: AzureCLI@2
        displayName: 'Terraform plan & apply (re-entrance test)'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)

            ./deploy.ps1 -apply -force
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
          
    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - pwsh: |
          Write-Host "Indicating success for job '$(Agent.JobName)'"
          Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
        name: provisioningResult
        displayName: 'Indicate provisioning success'
        condition: succeeded()

    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - task: TerraformCLI@0
        displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: succeededOrFailed()
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: failed()
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: succeeded()
        continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
        inputs:
          command: 'destroy'
          workingDirectory: '$(terraformDirectory)'
          environmentServiceName: '$(subscriptionConnection)'
          runAzLogin: true
          allowTelemetryCollection: true
        env:
          KUBECONFIG: variables['KUBE_CONFIG_PATH']

- ${{ if ne(parameters.destroy, 'Never') }}:
  # Clean up resources, in the event 'terraform destroy' fails   
  - job: 'Teardown'
    dependsOn:
      - Provision
    displayName: 'Tear down & Clean up (${{ lower(parameters.destroy) }})'
    ${{ if eq(parameters.destroy, 'Always') }}:
      condition: or(always(),canceled())
    ${{ if eq(parameters.destroy, 'On failure') }}:
      condition: not(eq(dependencies.Provision.outputs['provisioningResult.result'],'success'))
    ${{ if eq(parameters.destroy, 'On success') }}:
      condition: eq(dependencies.Provision.outputs['provisioningResult.result'],'success')
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      providerConfig: $[ dependencies.Provision.outputs['providerConfig.content'] ]
      terraformDirectory: $(Pipeline.Workspace)/$(terraformArtifactName)
      ${{ if not(or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual')))) }}:
        terraformVersion: $[ dependencies.Provision.outputs['terraformConfig.version'] ]
      ${{ if or(eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
        terraformVersion: $[ dependencies.Provision.outputs['pinTerraformProviders.terraformConfig.version'] ]

    pool:
      name: '$(pool)'
      vmImage: $(vmImage)

    workspace:
      clean: all

    steps:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down remaining resources'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resoyrce group fails
          # Build JMESPath expression
          $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '${env:TF_WORKSPACE}' && tags.runid == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
          Write-Host "Removing resources identified by `"$tagQuery`"..."

          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }

          # Remove (remaining) resources
          $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
          if ($resourceIDs) {
            Write-Host "Removing resources `"${resourceIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }

          # Remove VNet peerings
          if ($env:GEEKZTER_AGENT_VIRTUAL_NETWORK_ID) {
            $peeringIDs = $(az network vnet show --ids $env:GEEKZTER_AGENT_VIRTUAL_NETWORK_ID --query "virtualNetworkPeerings[?starts_with(name,'k8s-${env:TF_WORKSPACE}-')].id" -o tsv 2>$null)
            if ($peeringIDs) {
              Write-Host "Removing virtual network peerings `"${peeringIDs}`"..."
              &{ # az writes information to stderr
                $ErrorActionPreference = 'SilentlyContinue'
                az resource delete --ids $peeringIDs 2>&1
              }
            } else {
              Write-Host "No virtual network peerings to remove"
            }
          }
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'

    - ${{ if parameters.clear }}:
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Delete $(resourceGroup)'
        condition: failed() # Try this if the previous approach failed. Only works if we can identity the suffix and thefore the resource group name
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(subscriptionConnection)'
          subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
          action: 'DeleteRG'
          resourceGroupName: '$(resourceGroup)'

    - task: TerraformInstaller@0
      condition: succeededOrFailed()
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - download: current
      displayName: 'Download Terraform directory from previous job'
      artifact: $(terraformArtifactName)

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        workingDirectory: '$(terraformDirectory)'
        backendType: 'azurerm'
        backendServiceArm: '$(subscriptionConnection)'
        backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
        backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: true

    - task: AzureCLI@2
      name: cleanup
      displayName: 'Clean up Terraform state'
      condition: succeededOrFailed()
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Clean up Terraform state
          # Propagate pipeline Service Principal as Terraform variables
          $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
          $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
          $env:ARM_TENANT_ID       ??= $env:tenantId
          # Get from Azure CLI context
          $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
          $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull 
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'