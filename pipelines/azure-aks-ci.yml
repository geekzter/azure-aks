# This pipeline template performs a full CI test:
#  - Provision infrastructure
#  - Deploy application
#  - Test application
#  - Destroy infrastructure
parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3

variables:
- group: 'aks-ci'
- group: 'pipeline'

- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azkre-aks'

- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_WORKSPACE'
  value: ${{ parameters.workspace }}
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_VAR_resource_suffix'
  value: 'b$(Build.BuildId)'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'

- name: 'resourceGroup' 
  value: 'k8s-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

jobs:
- job: 'Provision'
  displayName: 'Provision'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  workspace:
    clean: all

  steps:
    - pwsh: |
        Write-Host "Script Directory: $(scriptDirectory)"
        Write-Host "Workspace Contents:"
        Get-ChildItem $(Pipeline.Workspace) -Recurse
        Write-Host "Environment:"
        Get-ChildItem -Path Env:* | Sort-Object -Property Name
      displayName: 'Test task'
    - task: AzureCLI@2
      displayName: 'Gather Terraform settings'
      name: terraformConfig
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GEEKZTER_*,TF_* | Sort-Object -Property Name

          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'
